Metadata-Version: 2.4
Name: ddd-framework
Version: 0.1.0
Summary: Documentation Driven Development - TDD for documentation coverage
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: pyyaml>=6.0
Requires-Dist: click>=8.0
Requires-Dist: rich>=13.0
Requires-Dist: jinja2>=3.0
Requires-Dist: python-dotenv>=1.0
Requires-Dist: sphinx>=7.0
Requires-Dist: sphinx-autodoc2>=0.5
Requires-Dist: myst-parser>=2.0
Requires-Dist: sphinx-rtd-theme>=2.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0; extra == "dev"
Requires-Dist: black>=23.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: pre-commit>=3.0; extra == "dev"
Requires-Dist: sphinx-autobuild>=2021.0; extra == "dev"
Requires-Dist: invoke>=2.0; extra == "dev"
Dynamic: requires-python

# Documentation Driven Development (DDD) Framework

A framework for measuring and ensuring documentation completeness using TDD-like principles.

## Core Concept

Just as Test-Driven Development (TDD) uses:
- **Tests** to define expected behavior
- **Code Coverage** to measure test completeness

Documentation-Driven Development (DDD) uses:
- **Documentation Specs** to define required documentation
- **Documentation Coverage** to measure documentation completeness

## The DDD Workflow

```
1. RED: Define documentation requirements (spec fails)
2. GREEN: Extract documentation until spec passes
3. REFACTOR: Optimize documentation quality
```

## Quick Start

```bash
# Install dependencies
pip install -e .

# Run documentation coverage on a project
ddd measure ./sample-project

# Check if documentation meets requirements
ddd assert ./sample-project --min-coverage 85
```

## Project Structure

```
ddd-framework/
├── src/
│   ├── ddd/
│   │   ├── __init__.py
│   │   ├── coverage/          # Coverage measurement
│   │   ├── extractors/        # Documentation extractors
│   │   ├── specs/             # Documentation specifications
│   │   └── reports/           # Coverage reporting
│   └── cli.py                 # Command-line interface
├── tests/
│   ├── fixtures/              # Sample projects with known coverage
│   └── test_*.py              # Test files
├── baseline/
│   └── ansible/               # Ansible as reference baseline
└── examples/
    └── javascript-project/    # Example JS project
```

## Documentation Coverage Metrics

The framework measures three levels of coverage:

1. **Element Coverage**: Does the documentation exist?
2. **Completeness Coverage**: Are all required fields present?
3. **Usefulness Coverage**: Can someone use this at 2AM?

## DAYLIGHT Dimensions

Documentation is measured across 8 dimensions:

- **D**ependencies: What the system needs to run
- **A**utomation: Scripts and CI/CD
- **Y**earbook: History and evolution
- **L**ifecycle: Environments and deployment
- **I**ntegration: External services and APIs
- **G**overnance: Standards and compliance
- **H**ealth: Monitoring and performance
- **T**esting: Test structure and coverage

## License

MIT
